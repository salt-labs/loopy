---
##################################################
# Name: rust.yml
# Description: Workflow for Rust projects
##################################################

name: Rust

on:
  # A pull request will trigger a build and test.
  pull_request:
    branches:
      - trunk
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
      - review_requested
    paths-ignore:
      - "docs/**"
      - "*.md"

  # A successful completion of this worflow will trigger a release.
  push:
    branches:
      - "trunk"
    paths-ignore:
      - "docs/**"
      - "*.md"

env:
  ORGANISATION: ${{ github.repository_owner }}
  PROJECT: ${{ github.event.repository.name }}

  BRANCH_NAME_CURRENT: ${{ github.head_ref || github.ref_name }}
  BRANCH_NAME_DEFAULT: ${{ github.event.repository.default_branch }}

  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  #########################
  # Test the package for linting
  # and ensure formatted correctly
  #########################

  cargo_check:
    name: Cargo Check

    runs-on: ${{ matrix.os }}

    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
            toolchain: stable
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            toolchain: stable
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            toolchain: stable
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            toolchain: stable
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            toolchain: stable
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            toolchain: stable
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            toolchain: stable

    steps:
      - id: setup_rust
        name: Setup the Rust environment
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
          default: true

      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          persist-credentials: true

      - id: cache_artifacts_cargo_registry
        name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-

      - id: cache_artifacts_cargo_index
        name: Cache Cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-

      - id: cache_artifacts_cargo_target
        name: Cache Cargo build
        uses: actions/cache@v2
        with:
          path: target/release
          key: ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-

      - id: cache_artifacts_vcpkg
        name: Cache vcpkg
        if: matrix.target == 'x86_64-pc-windows-msvc' && matrix.os == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: vcpkg
          key: ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-${{ matrix.toolchain }}-cargo-registry-

      - id: setup_rust_common
        name: Setup the Rust environment
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            autoconf \
            automake \
            build-essential \
            ca-certificates \
            clang \
            cmake \
            curl \
            file \
            gcc \
            g++ \
            git \
            libgcc1 \
            libmagic1 \
            libmagic-dev \
            libpq-dev \
            libssl-dev \
            libtool \
            make \
            pkgconf \
            xutils-dev \
            zlib1g-dev \
            zstd

      - id: setup_rust_amd64_gnu
        name: Setup the Rust environment for x86_64-unknown-linux-gnu
        if: matrix.target == 'x86_64-unknown-linux-gnu' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            gcc-multilib \
            g++-multilib

      - id: setup_rust_amd64_musl
        name: Setup the Rust environment for x86_64-unknown-linux-musl
        if: matrix.target == 'x86_64-unknown-linux-musl' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            musl \
            musl-dev \
            musl-tools

      - id: setup_rust_arm64_gnu
        name: Setup the Rust environment for aarch64-unknown-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - id: setup_rust_arm64_musl
        name: Setup the Rust environment for aarch64-unknown-linux-musl
        if: matrix.target == 'aarch64-unknown-linux-musl' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y \
            musl \
            musl-dev \
            musl-tools

      - id: setup_rust_android
        name: Setup the Rust environment for Android
        if: matrix.target == 'aarch64-linux-android' && matrix.os == 'ubuntu-latest'
        run: |
          # Install Android NDK
          curl -sSfL https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip -o android-ndk.zip
          unzip android-ndk.zip -d /opt/android-ndk
          export PATH=$PATH:/opt/android-sdk/cmdline-tools/tools/bin
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-29" "build-tools;29.0.2"
          export PATH=$PATH:/opt/android-sdk/ndk/22.0.7026061

      - id: setup_rust_macos
        name: Setup the Rust environment for MacOS
        if: matrix.target == 'x86_64-apple-darwin' && matrix.os == 'macos-latest'
        run: |
          brew update
          brew install libmagic openssl bzip2 figlet file gnu-tar zlib zstd pkg-config

      - id: setup_rust_windows_gnu
        name: Setup the Rust environment for x86_64-pc-windows-gnu
        if: matrix.target == 'x86_64-pc-windows-gnu' && matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install mingw winlibs llvm

      - id: setup_rust_windows_msvc
        name: Setup the Rust environment for x86_64-pc-windows-msvc
        if: matrix.target == 'x86_64-pc-windows-msvc' && matrix.os == 'windows-latest'
        shell: powershell
        env:
          VCPKG_INSTALLED: ${{ github.workspace }}/vcpkg/installed/
          VCPKG_DEFAULT_TRIPLET: "x64-windows-static-md"
        run: |
          #git clone https://github.com/microsoft/vcpkg.git
          #Push-Location -Path "vcpkg"
          #Start-Process ".\bootstrap-vcpkg.bat"
          #vcpkg.exe install curl:${env:VCPKG_DEFAULT_TRIPLET} libmagic:${env:VCPKG_DEFAULT_TRIPLET} openssl:${env:VCPKG_DEFAULT_TRIPLET} zlib:${env:VCPKG_DEFAULT_TRIPLET}
          #vcpkg.exe integrate install
          #Pop-Location
          #choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
          cargo install cargo-vcpkg
          cargo vcpkg --verbose build

      - id: cargo_check
        name: Run Cargo check
        run: |
          cargo --version
          cargo check --verbose --target ${{ matrix.target }}

      - id: cargo_fmt
        name: Run Cargo format
        run: |
          rustup component add rustfmt
          rustup component list --toolchain ${{ matrix.toolchain }}
          cargo fmt --version
          cargo fmt --all -- --check

      - id: cargo_clippy
        name: Run Cargo clippy
        run: |
          rustup component add clippy
          rustup component list --toolchain ${{ matrix.toolchain }}
          cargo clippy --version
          cargo clippy --all --all-features --target ${{ matrix.target }} -- -D warnings

      - id: cargo_build
        name: Run Cargo build
        run: |
          cargo --version
          cargo build --verbose --target ${{ matrix.target }} --release

      - id: cargo_test
        name: Run Cargo tests
        run: |
          cargo --version
          cargo test --verbose --target ${{ matrix.target }}

      - id: archive_rust
        name: Archive Rust artifacts (cross-platform)
        if: >-
          github.event_name == 'push' &&
          github.ref == 'refs/heads/${{ env.BRANCH_NAME_DEFAULT}}'
        shell: pwsh
        working-directory: "${{ github.workspace }}"
        run: >
          ./.github/scripts/archive.ps1
          -Target ${{ matrix.target }}
          -LogLevel debug
          -DieHard
          -OutputDir artifacts

      - id: upload_artifacts
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.PROJECT }}-${{ matrix.target }}.zip
          path: artifacts/${{ env.PROJECT }}-${{ matrix.target }}.zip
