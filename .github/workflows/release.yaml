---
##################################################
# Name: release.yaml
# Description: Workflow to create and publish to a GitHub release
##################################################

name: Release

on:
  workflow_run:
    workflows:
      - "Rust"
    types:
      - completed

permissions:
  contents: read

env:
  ORGANISATION: ${{ github.repository_owner }}
  PROJECT: ${{ github.event.repository.name }}

  # Works on pushes or PRs
  BRANCH_NAME_CURRENT: ${{ github.head_ref || github.ref_name }}
  BRANCH_NAME_DEFAULT: ${{ github.event.repository.default_branch }}

  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  #########################
  # Create a GitHub Release
  #########################

  create_release:
    name: Create a GitHub Release

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: checkout_repository
        name: Checkout repository with all history and tags
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          submodules: false
          clean: true
          persist-credentials: true

      - id: cargo_version
        name: Read Cargo.toml version
        run: |
          wget --output-document yj https://github.com/sclevine/yj/releases/latest/download/yj-linux-amd64
          chmod +x yj
          VERSION="$(./yj -tj < Cargo.toml | jq -r .package.version)"
          echo "VERSION=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "Package version: ${VERSION}"

      - id: check_tags
        name: Check git tags
        env:
          TAG: ${{ steps.cargo_version.outputs.VERSION }}
        run: |
          git fetch --tags
          if git show-ref --tags --verify --quiet "refs/tags/$TAG"
          then
            echo "The Release tag ${TAG} already exists, did you forget to bump the version?"
            exit 1
          else
            echo "The Release tag ${TAG} does not exist."
            echo "CREATE_TAG=true" >> "${GITHUB_OUTPUT}"
          fi

      - id: fetch_artifact
        name: Fetch all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - id: create_release
        name: Create Release
        if: >-
          github.event_name == 'push' &&
          github.ref == 'refs/heads/${{ env.BRANCH_NAME_DEFAULT}}' &&
          github.event.workflow_run.conclusion == 'success' &&
          steps.check_tags.outputs.CREATE_TAG == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          generate_release_notes: true
          name: ${{ env.PROJECT }} v${{ steps.cargo_version.outputs.VERSION }}
          #discussion_category_name: releases
          files: |
            artifacts/*
          fail_on_unmatched_files: true

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}

  #########################
  # Publish the the Rust app (crates.io)
  #########################

  release_publish_crates_io:
    name: Publish Release to crates.io

    needs:
      - create_release

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

    steps:
      - id: setup_rust
        name: Setup the Rust environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true

      - id: checkout_repository
        name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: false
          clean: true
          persist-credentials: true

      - id: release_id
        name: Show Release ID
        run: |
          echo "Release ID: ${{ needs.create_release.outputs.release_id }}"

      - id: upload_release_artifact_crates_io_dry
        name: Upload Rust application to crates.io (Dry Run)
        run: >
          cargo publish
          --token ${{ secrets.PAT_CRATES_IO }}
          --dry-run

      - id: upload_release_artifact_crates_io
        name: Upload Rust application to crates.io
        if: >-
          github.event_name == 'push' &&
          github.ref == 'refs/heads/${{ env.BRANCH_NAME_DEFAULT}}' &&
          needs.create_release.outputs.release_id != ''
        run: >
          cargo publish
          --token ${{ secrets.PAT_CRATES_IO }}
